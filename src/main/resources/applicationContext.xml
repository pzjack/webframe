<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
                http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
       default-lazy-init="true">
    <context:annotation-config />
    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.dinglicom">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    <!-- 
    <mvc:annotation-driven />
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>
    <aop:config proxy-target-class="true" /> -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:config.properties" />
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
        <property name="dataSource" ref="dataSource"/>
        <!--  <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/> -->
        <property name="persistenceProvider" ref="persistenceProvider" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
        <property name="jpaDialect" ref="jpaDialect" />
        <property name="packagesToScan" value="com.dinglicom"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.show_sql">true</prop>
                <!--
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</prop>
                -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.jdbc.fetch_size">18</prop>
                <prop key="hibernate.jdbc.batch_size">10</prop>
                <!-- <prop key="hibernate.hbm2ddl.auto">validate</prop> -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!-- <prop key="hibernate.format_sql">true</prop> -->
                <!--如果用查询缓存，就去掉注释--> <!-- hibernate.hbm2ddl.auto=update
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
                org.hibernate.cache.EhCacheRegionFactory
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                 -->
            </props>
        </property>
    </bean>
    <!--
    <bean class="org.hibernate.cache.ehcache.EhCacheRegionFactory">
        <property name="cacheManager" ref="ehCacheManagerFactory" />
    </bean>
    -->
    <!-- 用于指定持久化实现厂商类 -->
    <bean id="persistenceProvider"
          class="org.hibernate.ejb.HibernatePersistence" />
    <!-- 用于设置JPA实现厂商的特定属性 -->
    <bean id="jpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="database" value="MYSQL" />
    </bean>
    <!-- 用于指定一些高级特性 -->
    <bean id="jpaDialect"
          class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
    <!-- 事务管理器 -->
    <!-- <bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean> -->
    <!-- 注解式事务 -->
    <!--  <tx:annotation-driven transaction-manager="txManager" /> -->
    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.dinglicom"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
    <!-- JSR303 Validator定义 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
    
    <!-- 启用缓存注解功能 -->
    <cache:annotation-driven cache-manager="ehCacheManager" />
    <!-- 声明cacheManager     -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cacheManager-ref="ehcache" />
    <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache.xml" />
    
    <!-- Quartz的本地Cron式执行任务配置 -->

    <!-- Quartz本地Schduler -->
    <bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- Triggers集成 -->
        <property name="triggers">
            <list>
                <ref bean="cronTriggerDispatch" />
                <ref bean="cronTriggerReport" />
                <ref bean="cronTriggerAutoReport" />
            </list>
        </property>
        <!-- Quartz配置, 本地运行无需单独的quartz.properties文件，在此简单配置即可 -->
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.threadPool.threadCount">3</prop>
            </props>
        </property>
        <!-- 启动时延期300秒开始任务 -->
        <property name="startupDelay" value="30" />
    </bean>

    <!-- Cron式Trigger按照奶站生成配送单定义 -->
    <bean id="cronTriggerDispatch" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="cronJobDispatch" />
        <property name="cronExpression" value="0 20 0 * * ?" />
    </bean>
    <!-- Cron式Trigger按照单位计算报量定义 -->
    <bean id="cronTriggerReport" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="cronJobReport" />
        <property name="cronExpression" value="0 52 18 * * ?" />
    </bean>
    <!-- Cron式Trigger自动报量 -->
    <bean id="cronTriggerAutoReport" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="cronJobAutoReport" />
        <property name="cronExpression" value="0 53 18 * * ?" />
    </bean>

    <!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
    <bean id="cronJobDispatch" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="dispatchingRecordServiceImpl" />
        <property name="targetMethod" value="createDispatchingTaskByWorderOrg" />
        <!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
        <property name="concurrent" value="true" />
    </bean>
    
    <bean id="cronJobReport" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="everyDayEveryOrgReportServiceImpl" />
        <property name="targetMethod" value="doCreateReportnumberNextday" />
        <!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
        <property name="concurrent" value="true" />
    </bean>
    
    <bean id="cronJobAutoReport" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="reportSubscribeNumberServiceImpl" />
        <property name="targetMethod" value="autoReportNumber" />
        <!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
        <property name="concurrent" value="true" />
    </bean>
    <!-- 
   <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
       <property name="configLocation" value="classpath:ehcache.xml" />
       <property name="shared" value="false" />
   </bean>
   <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
       <property name="cacheManager" ref="ehCacheManagerFactory" />
       <property name="transactionAware" value="true"/>
   </bean>
    -->
    <!-- 初始化数据表结构 与默认数据-->
    <!-- <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
        <jdbc:script location="classpath:schema_mysql.sql" />
         <jdbc:script location="classpath:data/h2/import-data.sql" encoding="UTF-8"/>
    </jdbc:initialize-database>-->
    <!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
    <!-- <task:annotation-driven/> -->
    <!-- <context:annotation-config/> -->
    <!-- <util:properties id="cmncfg" location="/WEB-INF/config.properties" />  -->
    <!-- 
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
   <property name="dataSource" ref="dataSource" />
</bean>
<context:component-scan base-package="com.dinglicom.cdr.service" />
<context:component-scan base-package="com.dinglicom.cdr.controller" />
    -->
</beans>